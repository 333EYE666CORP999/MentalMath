name: "Epic Task Automation"

permissions:
  issues: write

on:
  issues:
    types: [opened]

jobs:
  handle-epic:
    runs-on: ubuntu-latest
    if: contains(github.event.issue.labels.*.name, 'epic')
    steps:
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Create Subtasks and Assign Milestone
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          #!/bin/bash

          # Check labels to determine action for tech or pre-MVP epics
          labels=$(jq -r '.issue.labels[].name' < "$GITHUB_EVENT_PATH")
          if echo "$labels" | grep -q "pre-MVP"; then
            subtasks_pre_exec=(
              "Idea"
              "Concept"
            )
            subtasks_exec=(
              "Implementation"
              "Test model"
              "Regress model"
            )
            milestone="pre-MVP"
            # Unset subtasks_release to ensure it's empty
            unset subtasks_release
          elif echo "$labels" | grep -q "tech"; then
            subtasks_pre_exec=(
              "Idea"
              "Hypothesis"
              "Discovery"
              "Design"
            )
            subtasks_exec=(
              "Grooming"
              "Development"
              "Test model"
              "Regress model"
            )
            subtasks_release=(
              "Screenshots"
              "Changelog"
              "Upload release"
            )
            milestone=""
          else
            echo "No relevant labels found. Exiting."
            exit 0
          fi

          # Get issue number and repository from GitHub context
          ISSUE_NUMBER=$(jq -r '.issue.number' < "$GITHUB_EVENT_PATH")
          REPO="${GITHUB_REPOSITORY}"
          EPIC_TITLE=$(jq -r '.issue.title' < "$GITHUB_EVENT_PATH")

          # Ensure REPO and ISSUE_NUMBER are correct
          if [ -z "$ISSUE_NUMBER" ] || [ -z "$REPO" ]; then
            echo "Error: Missing valid ISSUE_NUMBER or REPO. Exiting."
            exit 1
          fi

          # Retrieve the milestone number if a milestone title is set
          if [ -n "$milestone" ]; then
            milestone_response=$(curl -s \
                -H "Authorization: token $GITHUB_TOKEN" \
                -H "Accept: application/vnd.github.v3+json" \
                "https://api.github.com/repos/$REPO/milestones?state=all")

            milestone_number=$(echo "$milestone_response" | jq -r ".[] | select(.title == \"$milestone\") | .number")

            if [ -z "$milestone_number" ] || [ "$milestone_number" == "null" ]; then
              echo "Error: Milestone '$milestone' not found."
              exit 1
            fi

            # Assign the epic issue to the milestone
            update_data=$(jq -n --argjson milestone "$milestone_number" '{milestone: $milestone}')

            curl -s -X PATCH \
                 -H "Authorization: token $GITHUB_TOKEN" \
                 -H "Accept: application/vnd.github.v3+json" \
                 -H "Content-Type: application/json" \
                 https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER \
                 -d "$update_data"
          fi

          # Function to create subtasks and collect their numbers
          create_subtasks() {
            local -n subtasks_array=$1
            local -n numbers_array=$2
            for subtask in "${subtasks_array[@]}"; do
              if [ -n "$milestone_number" ]; then
                issue_data=$(jq -n \
                    --arg title "$EPIC_TITLE: $subtask" \
                    --arg body "Subtask for #$ISSUE_NUMBER" \
                    --argjson milestone "$milestone_number" \
                    '{title: $title, body: $body, milestone: $milestone}')
              else
                issue_data=$(jq -n \
                    --arg title "$EPIC_TITLE: $subtask" \
                    --arg body "Subtask for #$ISSUE_NUMBER" \
                    '{title: $title, body: $body}')
              fi

              response=$(curl -s -w "%{http_code}" -X POST \
                   -H "Authorization: token $GITHUB_TOKEN" \
                   -H "Accept: application/vnd.github.v3+json" \
                   -H "Content-Type: application/json" \
                   https://api.github.com/repos/$REPO/issues \
                   -d "$issue_data")

              http_status="${response: -3}"
              response_body="${response%???}"

              if [[ "$http_status" != "200" && "$http_status" != "201" ]]; then
                echo "Error: Failed to create issue for subtask: $subtask. HTTP status: $http_status"
                echo "Full response: $response_body"
                continue
              fi

              new_issue_number=$(echo "$response_body" | jq -r '.number')
              if [[ "$new_issue_number" == "null" ]]; then
                echo "Error creating issue for subtask: $subtask"
                echo "Full response: $response_body"
                continue
              fi
              echo "Created new issue #$new_issue_number for subtask: $subtask"
              numbers_array+=("$new_issue_number")
            done
          }

          # Create subtasks and collect their numbers
          pre_exec_numbers=()
          create_subtasks subtasks_pre_exec pre_exec_numbers

          exec_numbers=()
          create_subtasks subtasks_exec exec_numbers

          release_numbers=()
          if [ -n "${subtasks_release+set}" ] && [ "${#subtasks_release[@]}" -gt 0 ]; then
            create_subtasks subtasks_release release_numbers
          fi

          # Save arrays to temporary files
          TEMP_DIR="$RUNNER_TEMP/epic_automation"
          mkdir -p "$TEMP_DIR"

          printf '%s\n' "${pre_exec_numbers[@]}" > "$TEMP_DIR/pre_exec_numbers.txt"
          printf '%s\n' "${exec_numbers[@]}" > "$TEMP_DIR/exec_numbers.txt"

          printf '%s\n' "${subtasks_pre_exec[@]}" > "$TEMP_DIR/subtasks_pre_exec.txt"
          printf '%s\n' "${subtasks_exec[@]}" > "$TEMP_DIR/subtasks_exec.txt"

          # Only save release arrays if they exist
          if [ -n "${subtasks_release+set}" ] && [ "${#subtasks_release[@]}" -gt 0 ]; then
            printf '%s\n' "${release_numbers[@]}" > "$TEMP_DIR/release_numbers.txt"
            printf '%s\n' "${subtasks_release[@]}" > "$TEMP_DIR/subtasks_release.txt"
          fi

          echo "TEMP_DIR=$TEMP_DIR" >> $GITHUB_ENV

      - name: Update Epic Description
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          EPIC_TITLE: ${{ github.event.issue.title }}
          TEMP_DIR: ${{ env.TEMP_DIR }}
        run: |
          #!/bin/bash

          # Read arrays from files
          mapfile -t pre_exec_numbers < "$TEMP_DIR/pre_exec_numbers.txt"
          mapfile -t exec_numbers < "$TEMP_DIR/exec_numbers.txt"

          mapfile -t subtasks_pre_exec < "$TEMP_DIR/subtasks_pre_exec.txt"
          mapfile -t subtasks_exec < "$TEMP_DIR/subtasks_exec.txt"

          # Only read release arrays if the files exist and are not empty
          if [ -f "$TEMP_DIR/subtasks_release.txt" ] && [ -s "$TEMP_DIR/subtasks_release.txt" ]; then
            mapfile -t release_numbers < "$TEMP_DIR/release_numbers.txt"
            mapfile -t subtasks_release < "$TEMP_DIR/subtasks_release.txt"
          fi

          # Build the description with formatted checklist
          description=$''
          if [ "${#subtasks_pre_exec[@]}" -gt 0 ]; then
            description+=$'# Pre Exec\n'
            for i in "${!subtasks_pre_exec[@]}"; do
              subtask="${subtasks_pre_exec[$i]}"
              number="${pre_exec_numbers[$i]}"
              if [ -n "$number" ]; then
                description+=$'- [ ] #'$number' - '$subtask$'\n'
              else
                description+=$'- [ ] '$subtask$'\n'
              fi
            done
          fi

          if [ "${#subtasks_exec[@]}" -gt 0 ]; then
            description+=$'\n# Exec\n'
            for i in "${!subtasks_exec[@]}"; do
              subtask="${subtasks_exec[$i]}"
              number="${exec_numbers[$i]}"
              if [ -n "$number" ]; then
                description+=$'- [ ] #'$number' - '$subtask$'\n'
              else
                description+=$'- [ ] '$subtask$'\n'
              fi
            done
          fi

          # Only include Release section if arrays are set and have elements
          if [ -n "${subtasks_release+set}" ] && [ "${#subtasks_release[@]}" -gt 0 ]; then
            description+=$'\n# Release\n'
            for i in "${!subtasks_release[@]}"; do
              subtask="${subtasks_release[$i]}"
              number="${release_numbers[$i]}"
              if [ -n "$number" ]; then
                description+=$'- [ ] #'$number' - '$subtask$'\n'
              else
                description+=$'- [ ] '$subtask$'\n'
              fi
            done
          fi

          # Update the original issue with the modified checklist
          update_data=$(jq -n --arg body "$description" '{body: $body}')

          curl -X PATCH \
               -H "Authorization: token $GITHUB_TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               -H "Content-Type: application/json" \
               https://api.github.com/repos/$REPO/issues/$ISSUE_NUMBER \
               -d "$update_data"
