name: Build and Test

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: macos-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Setup Xcode
      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      # Step 3: Prepare Environment
      - name: Prepare Environment
        run: |
          echo "🔧 Preparing Environment..."
          
          if [ "$(uname -m)" = "arm64" ]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          else
            HOMEBREW_PREFIX="/usr/local"
          fi

          echo "📦 Checking for Homebrew installation..."
          if ! command -v brew &> /dev/null; then
            echo "🍺 Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          else
            echo "🍺 Homebrew already installed."
          fi

          echo "📦 Updating and upgrading Homebrew packages..."
          brew upgrade --greedy-latest

          echo "⚙️ Installing SwiftLint if needed..."
          if [ ! -x "${HOMEBREW_PREFIX}/bin/swiftlint" ]; then
            brew install swiftlint
          else
            echo "✅ SwiftLint already installed."
          fi

          echo "⚙️ Installing xcbeautify if needed..."
          if [ ! -x "${HOMEBREW_PREFIX}/bin/xcbeautify" ]; then
            brew install xcbeautify
          else
            echo "✅ xcbeautify already installed."
          fi

      # Step 4: Run SwiftLint
      - name: SwiftLint
        run: |
          echo "📝 Running SwiftLint..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          swiftlint lint --config swiftlint.yml | tee swiftlint.log | xcbeautify --is-ci --renderer github-actions

          num_violations=$(wc -l < swiftlint.log | xargs)
          threshold=20

          echo "📊 Found $num_violations violations."

          if [ "$num_violations" -gt "$threshold" ]; then
            echo "Linting ❌: $num_violations violations found (Threshold: $threshold)."
            exit 1
          else
            echo "Linting ✅: $num_violations violations found (Threshold: $threshold)."
          fi

      # Step 5: Set Default Scheme
      - name: Set Default Scheme
        run: |
          echo "⚙️ Setting Default Scheme..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          # Detect if it's a workspace or project
          echo "🔍 Detecting Xcode project type..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
            echo "✅ Workspace detected: $file_to_build"
          elif [ "$(ls -A | grep -i \.xcodeproj\$)" ]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
            echo "✅ Project detected: $file_to_build"
          else
            echo "❌ Error: No Xcode workspace or project found."
            exit 1
          fi

          # Clean up potential whitespace in the filename
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Retrieve the scheme list
          echo "📄 Retrieving scheme list for: $file_to_build ($filetype_parameter)..."
          scheme_list=$(xcodebuild -list -$filetype_parameter "$file_to_build" -json)

          # Show raw output for debugging
          echo "📄 Raw scheme list output:"
          echo "$scheme_list"

          if [ -z "$scheme_list" ]; then
            echo "❌ Error: Could not retrieve scheme list."
            exit 1
          fi

          echo "$scheme_list" > schemes.json

      # Step 8: Build for Testing
      - name: Build for Testing
        env:
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "🔨 Building for Testing..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          device="iPhone 14"  # Explicitly specify simulator to avoid multiple matching issues
          scheme=$(cat unit_test_scheme)

          # Determine if it's a workspace or project
          echo "🔍 Identifying project or workspace file..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi

          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Build with xcbeautify, use pipefail to ensure xcodebuild failures stop the process
          echo "🏗️ Building using xcodebuild..."
          set -o pipefail && xcodebuild build-for-testing \
            -scheme "Numerica" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -derivedDataPath DerivedData \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_FLAGS="-Xfrontend -strict-concurrency=complete -swift-version 6" \
            | xcbeautify --is-ci --renderer github-actions

          if [ $? -eq 0 ]; then
            echo "🔨 Build ✅ Completed successfully."
          else
            echo "🔨 Build ❌ Failed."
            exit 1
          fi

      # Step 9: Run Unit Tests
      - name: Run Unit Tests
        env:
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "🧪 Running Unit Tests..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          device="iPhone 15"

          # Determine if it's a workspace or project
          echo "🔍 Identifying project or workspace file..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi

          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Run unit tests with verbose logging
          echo "🚀 Starting unit tests..."
          set -o pipefail && xcodebuild test-without-building \
            -scheme "NumericaTests" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -derivedDataPath DerivedData \
            -enableCodeCoverage YES \
            | tee unit_tests.log

          # Process the xcodebuild log to make results readable
          echo "📊 Parsing unit test log for individual test results..."
          cat unit_tests.log | xcbeautify --is-ci --renderer github-actions

          if [ $? -eq 0 ]; then
            echo "🧪 Unit Tests ✅ All unit tests passed successfully."
          else
            echo "🧪 Unit Tests ❌ Some unit tests failed. Check the log for details."
            exit 1
          fi

      # Step 10: Run UI Tests
      - name: Run UI Tests
        env:
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "🧪 Running UI Tests..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          device="iPhone 14"  # Use the same explicit device
          scheme=$(cat ui_test_scheme)

          # Determine if it's a workspace or project
          echo "🔍 Identifying project or workspace file..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi

          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Run UI tests with verbose logging
          echo "🚀 Starting UI tests..."
          set -o pipefail && xcodebuild test-without-building \
            -scheme "NumericaUITests" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -derivedDataPath DerivedData \
            | tee ui_tests.log

          # Process the xcodebuild log to make results readable
          echo "📊 Parsing UI test log for individual test results..."
          cat ui_tests.log | xcbeautify --is-ci --renderer github-actions

          if [ $? -eq 0 ]; then
            echo "🧪 UI Tests ✅ All UI tests passed successfully."
          else
            echo "🧪 UI Tests ❌ Some UI tests failed. Check the log for details."
            exit 1
          fi
