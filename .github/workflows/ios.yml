name: Build and Test

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Prepare Environment
        run: |
          echo "üîß Preparing Environment..."
          
          if [ "$(uname -m)" = "arm64" ]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          else
            HOMEBREW_PREFIX="/usr/local"
          fi

          echo "üì¶ Checking for Homebrew installation..."
          if ! command -v brew &> /dev/null; then
            echo "üç∫ Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          else
            echo "üç∫ Homebrew already installed."
          fi

          echo "üì¶ Updating and upgrading Homebrew packages..."
          brew upgrade --greedy-latest

          echo "‚öôÔ∏è Installing SwiftLint if needed..."
          if [ ! -x "${HOMEBREW_PREFIX}/bin/swiftlint" ]; then
            brew install swiftlint
          else
            echo "‚úÖ SwiftLint already installed."
          fi

          echo "‚öôÔ∏è Installing xcbeautify if needed..."
          if [ ! -x "${HOMEBREW_PREFIX}/bin/xcbeautify" ]; then
            brew install xcbeautify
          else
            echo "‚úÖ xcbeautify already installed."
          fi

      - name: SwiftLint
        run: |
          echo "üìù Running SwiftLint..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          swiftlint lint --config swiftlint.yml | tee swiftlint.log | xcbeautify --is-ci --renderer github-actions

          num_violations=$(wc -l < swiftlint.log | xargs)
          threshold=20

          echo "üìä Found $num_violations violations."

          if [ "$num_violations" -gt "$threshold" ]; then
            echo "Linting ‚ùå: $num_violations violations found (Threshold: $threshold)."
            exit 1
          else
            echo "Linting ‚úÖ: $num_violations violations found (Threshold: $threshold)."
          fi

      - name: Set Default Scheme
        run: |
          echo "‚öôÔ∏è Setting Default Scheme..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          # Detect if it's a workspace or project
          echo "üîç Detecting Xcode project type..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
            echo "‚úÖ Workspace detected: $file_to_build"
          elif [ "$(ls -A | grep -i \.xcodeproj\$)" ]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
            echo "‚úÖ Project detected: $file_to_build"
          else
            echo "‚ùå Error: No Xcode workspace or project found."
            exit 1
          fi

          # Clean up potential whitespace in the filename
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Retrieve the scheme list
          echo "üìÑ Retrieving scheme list for: $file_to_build ($filetype_parameter)..."
          scheme_list=$(xcodebuild -list -$filetype_parameter "$file_to_build" -json)

          # Show raw output for debugging
          echo "üìÑ Raw scheme list output:"
          echo "$scheme_list"

          if [ -z "$scheme_list" ]; then
            echo "‚ùå Error: Could not retrieve scheme list."
            exit 1
          fi

          echo "$scheme_list" > schemes.json

      - name: Build for Testing
        env:
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "üî® Building for Testing..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          device="iPhone 15 Pro Max"  # Explicitly specify simulator with a recent model and OS version

          # Determine if it's a workspace or project
          echo "üîç Identifying project or workspace file..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi

          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Build with xcbeautify, use pipefail to ensure xcodebuild failures stop the process
          echo "üèóÔ∏è Building using xcodebuild..."
          set -o pipefail && xcodebuild build-for-testing \
            -scheme "Numerica" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro Max,OS=17.4" \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_FLAGS="-Xfrontend -strict-concurrency=complete -swift-version 6" \
            | xcbeautify --is-ci --renderer github-actions

          if [ $? -eq 0 ]; then
            echo "üî® Build ‚úÖ Completed successfully."
          else
            echo "üî® Build ‚ùå Failed."
            exit 1
          fi

      - name: Run All Tests
        env:
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "üß™ Running All Tests..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          device="iPhone 15 Pro Max"

          # Determine if it's a workspace or project
          echo "üîç Identifying project or workspace file..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi

          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Run unit tests with verbose logging, explicitly use the test plan "AllTests"
          echo "üöÄ Starting all tests using the AllTests test plan..."
          set -o pipefail && xcodebuild test \
            -scheme "NumericaTests" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro Max,OS=17.4" \
            -enableCodeCoverage YES \
            -testPlan "AllTests" \
            | tee unit_tests.log | xcbeautify --is-ci --renderer github-actions

          if [ $? -eq 0 ]; then
            echo "üß™ Tests ‚úÖ All tests passed successfully."
          else
            echo "üß™ Tests ‚ùå Some tests failed. Check the log for details."
            exit 1
          fi
          
          echo "üìÑ Generating Detailed Test Report..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          # Define colors
          blue='\033[1;34m'
          deep_blue='\033[0;34m'
          orange='\033[0;33m'
          green='\033[0;32m'
          red='\033[0;31m'
          nc='\033[0m' # No Color

          # Process the log and create a formatted report
          while IFS= read -r line; do
            if [[ $line == *"Test Suite"* ]]; then
              suite_name=$(echo "$line" | grep -o "Test Suite '.*' started" | cut -d "'" -f 2)
            elif [[ $line == *"Test Case"* ]]; then
              if [[ $line == *"passed"* ]]; then
                status="${green}‚úÖ${nc}"
                test_name=$(echo "$line" | grep -o "Test Case '.*' passed" | cut -d "'" -f 2)
                time_taken=$(echo "$line" | grep -o "[0-9]*\.[0-9]* seconds" | cut -d ' ' -f 1)
              elif [[ $line == *"failed"* ]]; then
                status="${red}‚ùå${nc}"
                test_name=$(echo "$line" | grep -o "Test Case '.*' failed" | cut -d "'" -f 2)
                time_taken=$(echo "$line" | grep -o "[0-9]*\.[0-9]* seconds" | cut -d ' ' -f 1)
              fi

              # Print the formatted report
              datetime=$(date "+%Y-%m-%d %H:%M:%S")
              echo -e "[${blue}${datetime}${nc}] [$status] [${deep_blue}${suite_name}${nc}] [${test_name}] [${orange}${time_taken} sec${nc}]"
            fi
          done < unit_tests.log
