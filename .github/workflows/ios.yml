name: Build for Tests

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    name: Build
    runs-on: macos-15  # Set macOS version to Sequoia 15.0

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Xcode Environment
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Prepare Environment
        run: |
          echo "üîß Preparing Environment..."

          if [ "$(uname -m)" = "arm64" ]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          else
            HOMEBREW_PREFIX="/usr/local"
          fi

          if ! command -v brew &> /dev/null; then
            echo "üç∫ Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          else
            echo "üç∫ Homebrew already installed. Updating packages..."
            brew upgrade --greedy-latest
          fi

          if [ ! -x "${HOMEBREW_PREFIX}/bin/swiftlint" ]; then
            echo "‚öôÔ∏è Installing SwiftLint..."
            brew install swiftlint
          else
            echo "‚úÖ SwiftLint already installed."
          fi

          if [ ! -x "${HOMEBREW_PREFIX}/bin/xcpretty" ]; then
            echo "‚öôÔ∏è Installing xcpretty..."
            gem install xcpretty
          else
            echo "‚úÖ xcpretty already installed."
          fi

          if ! command -v jq &> /dev/null; then
            echo "‚öôÔ∏è Installing jq for JSON parsing..."
            brew install jq
          else
            echo "‚úÖ jq already installed."
          fi

      - name: Lint
        run: |
          echo "üìù Running SwiftLint..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          swiftlint lint --config swiftlint.yml --reporter json > swiftlint_raw.json

          num_violations=$(jq '. | length' swiftlint_raw.json)
          threshold=20

          cat swiftlint_raw.json

          echo "üìä Found $num_violations violations."

          if [ "$num_violations" -gt "$threshold" ]; then
            echo "‚ùå Linting failed: $num_violations violations found (Threshold: $threshold)."
            exit 1
          else
            echo "‚úÖ Linting passed: $num_violations violations found (Threshold: $threshold)."
          fi

      - name: Build
        run: |
          echo "üî® Building Numerica Scheme..."
          cd $GITHUB_WORKSPACE/Numerica-iOS
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          result_bundle_path="build-results/Numerica.xcresult"
          mkdir -p build-results

          set -o pipefail && xcodebuild build \
            -scheme "Numerica" \
            -"$filetype_parameter" "$file_to_build" \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_FLAGS="-Xfrontend -strict-concurrency=complete -swift-version 6" \
            -resultBundlePath "$result_bundle_path"

          echo "üìÑ Parsing build results from ${result_bundle_path}..."
          parsed_build_results=$(xcrun xcresulttool get --legacy --path "$result_bundle_path" --format json)

          echo "$parsed_build_results" | jq '.actions._values[] | select(.schemeCommandName == "Build") | {buildStatus: .buildResult.status._value}'

          if [ $? -eq 0 ]; then
            echo "‚úÖ Build completed successfully."
          else
            echo "‚ùå Build failed. Check the build log for more details."
            exit 1
          fi

  test:
    name: Test
    needs: build
    runs-on: macos-15  # Set macOS version to Sequoia 15.0

    strategy:
      matrix:
        scheme: [ "NumericaTests", "NumericaUITests" ]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Xcode Environment
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.0'

      - name: Run Tests for Scheme
        run: |
          echo "üß™ Running Tests for Scheme: ${{ matrix.scheme }}..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Run tests for the scheme with its corresponding test plan
          result_bundle_path="test-results/${{ matrix.scheme }}.xcresult"
          mkdir -p test-results

          set -o pipefail && xcodebuild test \
            -scheme "${{ matrix.scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -testPlan "${{ matrix.scheme }}" \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            CODE_SIGNING_ALLOWED=NO \
            -resultBundlePath "$result_bundle_path"

          # Parse the .xcresult bundle using the --legacy flag to extract test results and print to the console
          echo "üìÑ Parsing test results from ${result_bundle_path}..."
          parsed_test_results=$(xcrun xcresulttool get --legacy --path "$result_bundle_path" --format json)

          echo "$parsed_test_results" | jq '.actions._values[] | select(.schemeCommandName == "Test").tests._values[] | {testIdentifier: .identifier._value, status: .testStatus._value, duration: .duration._value}'

          if [ $? -eq 0 ]; then
            echo "‚úÖ All tests passed for scheme: ${{ matrix.scheme }}."
          else
            echo "‚ùå Some tests failed for scheme: ${{ matrix.scheme }}. Check the log for details."
            exit 1
          fi
