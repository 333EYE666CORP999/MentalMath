name: Build and Test

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build_and_test:
    name: Build and Test
    runs-on: macos-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Xcode
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest'

      # Original environment preparation steps
      - name: Prepare Environment
        run: |
          if [ "$(uname -m)" = "arm64" ]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          else
            HOMEBREW_PREFIX="/usr/local"
          fi

          if ! command -v brew &> /dev/null; then
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          fi

          brew upgrade --greedy-latest

          if [ ! -x "${HOMEBREW_PREFIX}/bin/swiftlint" ]; then
            brew install swiftlint
          fi

          if [ ! -x "${HOMEBREW_PREFIX}/bin/xcbeautify" ]; then
            brew install xcbeautify
          fi

      - name: SwiftLint
        run: |
          cd $GITHUB_WORKSPACE/Numerica-iOS
          swiftlint lint --config swiftlint.yml | tee swiftlint.log | xcbeautify --is-ci --renderer github-actions
          num_violations=$(wc -l < swiftlint.log | xargs)

          threshold=20

          echo "Found $num_violations violations."

          if [ "$num_violations" -gt "$threshold" ]; then
            echo "Linting ❌: $num_violations violations found (Threshold: $threshold)."
            exit 1
          else
            echo "Linting ✅: $num_violations violations found (Threshold: $threshold)."
          fi

      - name: Set Default Scheme
        run: |
          echo "Setting Default Scheme..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          # Detect if it's a workspace or project
          echo "Detecting Xcode project type..."
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
            echo "✅ Workspace detected: $file_to_build"
          elif [ "$(ls -A | grep -i \.xcodeproj\$)" ]; then
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
            echo "✅ Project detected: $file_to_build"
          else
            echo "❌ Error: No Xcode workspace or project found."
            exit 1
          fi

          # Clean up potential whitespace in the filename
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          # Run xcodebuild -list to retrieve the scheme list
          echo "Retrieving scheme list for: $file_to_build ($filetype_parameter)..."
          scheme_list=$(xcodebuild -list -$filetype_parameter "$file_to_build" -json)

          # Show the raw output for debugging purposes
          echo "Raw scheme list output:"
          echo "$scheme_list"

          if [ -z "$scheme_list" ]; then
            echo "❌ Error: Could not retrieve scheme list."
            exit 1
          fi

          # Extract the first scheme as the default scheme
          default=$(echo $scheme_list | ruby -e "require 'json'; puts JSON.parse(STDIN.gets)['project']['schemes'][0]")

          if [ -z "$default" ]; then
            echo "❌ Error: No default scheme found."
            exit 1
          fi

          echo "✅ Default scheme: $default"
          echo $default > default

      # New Step: Build for Testing
      - name: Build for Testing
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "Building for Testing..."
          cd $GITHUB_WORKSPACE/Numerica-iOS
          device="iPhone 14"  # Explicitly specify simulator to avoid multiple matching issues
          scheme=$(cat default)
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          xcodebuild build-for-testing -scheme "$scheme" -"$filetype_parameter" "$file_to_build" -destination "platform=$platform,name=$device" -derivedDataPath DerivedData CODE_SIGNING_ALLOWED=NO | xcbeautify --is-ci --renderer github-actions

      # Updated Test Step: Run All Tests
      - name: Run All Tests
        env:
          scheme: ${{ 'default' }}
          platform: ${{ 'iOS Simulator' }}
        run: |
          echo "Running All Tests..."
          cd $GITHUB_WORKSPACE/Numerica-iOS
          device="iPhone 14"  # Use the same explicit device
          scheme=$(cat default)  # Use the default scheme to run all tests
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')

          xcodebuild test-without-building \
            -scheme "$scheme" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=$platform,name=$device" \
            -derivedDataPath DerivedData \
            -parallel-testing-enabled YES | xcbeautify --is-ci --renderer github-actions
