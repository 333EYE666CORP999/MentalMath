name: Build and Test

on:
  pull_request:
    branches: [ "develop" ]

jobs:
  build:
    name: Build Numerica
    runs-on: macos-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Xcode Environment
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Prepare Environment
        run: |
          echo "üîß Preparing Environment..."

          if [ "$(uname -m)" = "arm64" ]; then
            HOMEBREW_PREFIX="/opt/homebrew"
          else
            HOMEBREW_PREFIX="/usr/local"
          fi

          if ! command -v brew &> /dev/null; then
            echo "üç∫ Installing Homebrew..."
            /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          else
            echo "üç∫ Homebrew already installed. Updating packages..."
            brew upgrade --greedy-latest
          fi

          if [ ! -x "${HOMEBREW_PREFIX}/bin/swiftlint" ]; then
            echo "‚öôÔ∏è Installing SwiftLint..."
            brew install swiftlint
          else
            echo "‚úÖ SwiftLint already installed."
          fi

          if [ ! -x "${HOMEBREW_PREFIX}/bin/xcbeautify" ]; then
            echo "‚öôÔ∏è Installing xcbeautify..."
            brew install xcbeautify
          else
            echo "‚úÖ xcbeautify already installed."
          fi

          if ! command -v jq &> /dev/null; then
            echo "‚öôÔ∏è Installing jq for JSON parsing..."
            brew install jq
          else
            echo "‚úÖ jq already installed."
          fi

      - name: Run SwiftLint
        run: |
          echo "üìù Running SwiftLint..."
          cd $GITHUB_WORKSPACE/Numerica-iOS

          swiftlint lint --config swiftlint.yml --reporter json > swiftlint_raw.json
          cat swiftlint_raw.json | jq '.' | xcbeautify --is-ci --renderer github-actions | tee swiftlint.json

          num_violations=$(jq '. | length' swiftlint_raw.json)
          threshold=20

          echo "üìä Found $num_violations violations."

          cat swiftlint.json

          if [ "$num_violations" -gt "$threshold" ]; then
            echo "‚ùå Linting failed: $num_violations violations found (Threshold: $threshold)."
            exit 1
          else
            echo "‚úÖ Linting passed: $num_violations violations found (Threshold: $threshold)."
          fi

      - name: Build Numerica Scheme
        run: |
          echo "üî® Building Numerica Scheme..."
          cd $GITHUB_WORKSPACE/Numerica-iOS
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          set -o pipefail && xcodebuild build \
            -scheme "Numerica" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "platform=iOS Simulator,name=iPhone 15 Pro Max,OS=18.1" \
            CODE_SIGNING_ALLOWED=NO \
            SWIFT_FLAGS="-Xfrontend -strict-concurrency=complete -swift-version 6" \
            | xcbeautify --is-ci --renderer github-actions
          if [ $? -eq 0 ]; then
            echo "‚úÖ Build completed successfully."
          else
            echo "‚ùå Build failed."
            exit 1
          fi

  test:
    name: Run Tests in Parallel
    needs: build
    runs-on: macos-latest

    strategy:
      matrix:
        scheme: [NumericaTests, NumericaUITests]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Xcode Environment
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: 'latest-stable'

      - name: Select Random iPhone on iOS 18
        id: select_device
        run: |
          echo "üîç Listing available simulators..."
          xcrun simctl list > simulators.txt

          devices=$(awk '/iPhone/ && /iOS 18\.[0-9]+/ && /available/ {print}' simulators.txt)

          if [ -z "$devices" ]; then
            echo "‚ùå No available iPhone simulators running iOS 18 found."
            exit 1
          fi

          selected_device=$(echo "$devices" | shuf -n 1)
          device_name=$(echo "$selected_device" | awk -F '[()]' '{print $1}' | xargs)
          device_id=$(echo "$selected_device" | grep -Eo '\([0-9A-F-]+\)' | tr -d '()')
          os_version=$(echo "$selected_device" | grep -Eo 'iOS 18\.[0-9]+')

          echo "Selected iPhone: $device_name, OS: $os_version, UDID: $device_id"
          echo "::set-output name=device::platform=iOS Simulator,UDID=$device_id"

      - name: Run Tests
        run: |
          echo "üß™ Running Tests for Scheme: ${{ matrix.scheme }}..."
          cd $GITHUB_WORKSPACE/Numerica-iOS
          if [ "$(ls -A | grep -i \.xcworkspace\$)" ]; then
            filetype_parameter="workspace"
            file_to_build="$(ls -A | grep -i \.xcworkspace\$)"
          else
            filetype_parameter="project"
            file_to_build="$(ls -A | grep -i \.xcodeproj\$)"
          fi
          file_to_build=$(echo $file_to_build | awk '{$1=$1;print}')
          set -o pipefail && xcodebuild test \
            -scheme "${{ matrix.scheme }}" \
            -"$filetype_parameter" "$file_to_build" \
            -destination "${{ steps.select_device.outputs.device }}" \
            -enableCodeCoverage YES \
            -parallel-testing-enabled YES \
            | tee unit_tests_${{ matrix.scheme }}.log | xcbeautify --is-ci --renderer github-actions
          if [ $? -eq 0 ]; then
            echo "‚úÖ All tests passed for scheme: ${{ matrix.scheme }}."
          else
            echo "‚ùå Some tests failed for scheme: ${{ matrix.scheme }}. Check the log for details."
            exit 1
          fi
